// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: app_configuration.sql

package repository

import (
	"context"
	"database/sql"
)

const listAppConfigsByScope = `-- name: ListAppConfigsByScope :many
select c.pid as "pid", appconf.scope as "scope", appconf.name as "name", c.type as "type", appconf.text_value as "text_value"
from "app_configuration" appconf
join "config" c on appconf.name = c.name
where appconf.scope = $1
`

type ListAppConfigsByScopeRow struct {
	Pid       string         `json:"pid"`
	Scope     sql.NullString `json:"scope"`
	Name      sql.NullString `json:"name"`
	Type      sql.NullString `json:"type"`
	TextValue string         `json:"text_value"`
}

func (q *Queries) ListAppConfigsByScope(ctx context.Context, scope sql.NullString) ([]ListAppConfigsByScopeRow, error) {
	rows, err := q.db.QueryContext(ctx, listAppConfigsByScope, scope)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAppConfigsByScopeRow
	for rows.Next() {
		var i ListAppConfigsByScopeRow
		if err := rows.Scan(
			&i.Pid,
			&i.Scope,
			&i.Name,
			&i.Type,
			&i.TextValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
