// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: authn.sql

package repository

import (
	"context"
	"database/sql"
)

const createAuthn = `-- name: CreateAuthn :one
insert into "authn" (customer_id, "type", ref_id)
values ($1, $2, $3)
returning id, customer_id, type, ref_id, version, updated_at, created_at
`

type CreateAuthnParams struct {
	Customerid sql.NullInt32  `json:"customerid"`
	Type       sql.NullString `json:"type"`
	Refid      sql.NullInt32  `json:"refid"`
}

func (q *Queries) CreateAuthn(ctx context.Context, arg CreateAuthnParams) (Authn, error) {
	row := q.db.QueryRowContext(ctx, createAuthn, arg.Customerid, arg.Type, arg.Refid)
	var i Authn
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Type,
		&i.RefID,
		&i.Version,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const createAuthnEmail = `-- name: CreateAuthnEmail :one
insert into "authn_email" (email, password_hash)
values ($1, $2)
returning id, email, password_hash, activated, version, updated_at, created_at
`

type CreateAuthnEmailParams struct {
	Email        sql.NullString `json:"email"`
	Passwordhash string         `json:"passwordhash"`
}

func (q *Queries) CreateAuthnEmail(ctx context.Context, arg CreateAuthnEmailParams) (AuthnEmail, error) {
	row := q.db.QueryRowContext(ctx, createAuthnEmail, arg.Email, arg.Passwordhash)
	var i AuthnEmail
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Activated,
		&i.Version,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const createCustomer = `-- name: CreateCustomer :one
insert into "customer" (pid, email)
values ($1, $2)
returning id, pid, email, version, updated_at, created_at
`

type CreateCustomerParams struct {
	Pid   string         `json:"pid"`
	Email sql.NullString `json:"email"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer, arg.Pid, arg.Email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Pid,
		&i.Email,
		&i.Version,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
