// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: authn.sql

package repository

import (
	"context"
	"database/sql"
)

const getUserFromEmail = `-- name: GetUserFromEmail :one
select id, pid, authn_type, email, password_hash, validated
from "user"
where email = $1 and authn_type = $2
`

type GetUserFromEmailParams struct {
	Email     sql.NullString `json:"email"`
	AuthnType sql.NullString `json:"authn_type"`
}

type GetUserFromEmailRow struct {
	ID           int64          `json:"id"`
	Pid          string         `json:"pid"`
	AuthnType    sql.NullString `json:"authn_type"`
	Email        sql.NullString `json:"email"`
	PasswordHash string         `json:"password_hash"`
	Validated    bool           `json:"validated"`
}

func (q *Queries) GetUserFromEmail(ctx context.Context, arg GetUserFromEmailParams) (GetUserFromEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserFromEmail, arg.Email, arg.AuthnType)
	var i GetUserFromEmailRow
	err := row.Scan(
		&i.ID,
		&i.Pid,
		&i.AuthnType,
		&i.Email,
		&i.PasswordHash,
		&i.Validated,
	)
	return i, err
}

const registerUserWithEmail = `-- name: RegisterUserWithEmail :one
insert into "user" (pid, authn_type, email, password_hash)
values ($1, $2, $3, $4)
returning id, pid, authn_type, email, password_hash, validated, version, updated_at, created_at
`

type RegisterUserWithEmailParams struct {
	Pid          string         `json:"pid"`
	AuthnType    sql.NullString `json:"authn_type"`
	Email        sql.NullString `json:"email"`
	PasswordHash string         `json:"password_hash"`
}

func (q *Queries) RegisterUserWithEmail(ctx context.Context, arg RegisterUserWithEmailParams) (User, error) {
	row := q.db.QueryRowContext(ctx, registerUserWithEmail,
		arg.Pid,
		arg.AuthnType,
		arg.Email,
		arg.PasswordHash,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Pid,
		&i.AuthnType,
		&i.Email,
		&i.PasswordHash,
		&i.Validated,
		&i.Version,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const validateUser = `-- name: ValidateUser :one
update "user"
set validated = true
where email = $1
returning validated
`

func (q *Queries) ValidateUser(ctx context.Context, email sql.NullString) (bool, error) {
	row := q.db.QueryRowContext(ctx, validateUser, email)
	var validated bool
	err := row.Scan(&validated)
	return validated, err
}
